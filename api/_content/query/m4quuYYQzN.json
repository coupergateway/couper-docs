[{"_path":"/configuration/block/basic_auth","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Basic Auth","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"basic-auth"},"children":[{"type":"text","value":"Basic Auth"}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":"left"},"children":[{"type":"text","value":"Block name"}]},{"type":"element","tag":"th","props":{"align":"left"},"children":[{"type":"text","value":"Context"}]},{"type":"element","tag":"th","props":{"align":"left"},"children":[{"type":"text","value":"Label"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":"left"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"basic_auth"}]}]},{"type":"element","tag":"td","props":{"align":"left"},"children":[{"type":"element","tag":"a","props":{"href":"/configuration/block/definitions"},"children":[{"type":"text","value":"Definitions Block"}]}]},{"type":"element","tag":"td","props":{"align":"left"},"children":[{"type":"text","value":"required"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"basic_auth"}]},{"type":"text","value":" block lets you configure basic auth for your gateway. Like all\n"},{"type":"element","tag":"a","props":{"href":"/configuration/access-control"},"children":[{"type":"text","value":"access control"}]},{"type":"text","value":" types, the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"basic_auth"}]},{"type":"text","value":" block is defined in the\n"},{"type":"element","tag":"a","props":{"href":"/configuration/block/definitions"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definitions"}]},{"type":"text","value":" block"}]},{"type":"text","value":" and can be referenced in all configuration\nblocks by its required "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"label"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If both "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user"}]},{"type":"text","value":"/"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"htpasswd_file"}]},{"type":"text","value":" are configured, the incoming\ncredentials from the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Authorization"}]},{"type":"text","value":" request HTTP header field are checked against\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user"}]},{"type":"text","value":"/"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" if the user matches, and against the data in the file referenced\nby "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"htpasswd_file"}]},{"type":"text","value":" otherwise."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user"}]},{"type":"text","value":" is accessible via "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"request.context.<label>.user"}]},{"type":"text","value":" variable for successfully authenticated requests."}]},{"type":"element","tag":"h3","props":{"id":"attribute-htpasswd_file"},"children":[{"type":"text","value":"Attribute "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"htpasswd_file"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Couper uses "},{"type":"element","tag":"a","props":{"href":"https://httpd.apache.org/docs/current/programs/htpasswd.html","rel":["nofollow"]},"children":[{"type":"text","value":"Apache's httpasswd"}]},{"type":"text","value":" file format. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"apr1"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"md5"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bcrypt"}]},{"type":"text","value":" password encryption are supported. The file is loaded once at startup. Restart Couper after you have changed it."}]},{"type":"element","tag":"attributes","props":{":values":"[{\"default\":\"\",\"description\":\"Log fields for [custom logging](/observation/logging#custom-logging). Inherited by nested blocks.\",\"name\":\"custom_log_fields\",\"type\":\"object\"},{\"default\":\"\",\"description\":\"The htpasswd file.\",\"name\":\"htpasswd_file\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"The corresponding password.\",\"name\":\"password\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"The realm to be sent in a WWW-Authenticate response HTTP header field.\",\"name\":\"realm\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"The user name.\",\"name\":\"user\",\"type\":\"string\"}]"},"children":[]},{"type":"element","tag":"blocks","props":{":values":"[{\"description\":\"Configures an [error handler](/configuration/block/error_handler) (zero or more).\",\"name\":\"error_handler\"}]"},"children":[]}]},"_type":"markdown","_id":"content:2.configuration:4.block:basic_auth.md","_source":"content","_file":"2.configuration/4.block/basic_auth.md","_extension":"md"},{"_path":"/configuration/block/client_certificate","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Client Certificate","description":"The `client_certificate` block is part of its parent `tls` block. Enables mTLS configuration.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"client-certificate"},"children":[{"type":"text","value":"Client Certificate"}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":"left"},"children":[{"type":"text","value":"Block name"}]},{"type":"element","tag":"th","props":{"align":"left"},"children":[{"type":"text","value":"Context"}]},{"type":"element","tag":"th","props":{"align":"left"},"children":[{"type":"text","value":"Label"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":"left"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"client_certificate"}]}]},{"type":"element","tag":"td","props":{"align":"left"},"children":[{"type":"element","tag":"a","props":{"href":"/configuration/block/server_tls"},"children":[{"type":"text","value":"tls Block"}]}]},{"type":"element","tag":"td","props":{"align":"left"},"children":[{"type":"text","value":"optional"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Define an optional "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"client_certificate"}]},{"type":"text","value":" block with its optional "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"label"}]},{"type":"text","value":" to enable "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"mTLS"}]},{"type":"text","value":"."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"mTLS:"}]},{"type":"text","value":" stands for mutual TLS and will extend the normal handshake process with an additional request (client must present the certificate) and verification for the configured client certificate (CA)."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Configuring a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ca_certificate"}]},{"type":"text","value":" is the standard way to specify a client certificate. But you can also provide the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"leaf_certificate"}]},{"type":"text","value":"\nwhich effectively is the client certificate. The server will verify the given client certificate byte by byte against its own leaf certificate.\nA combination of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ca_certificate"}]},{"type":"text","value":"(or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ca_certificate_file"}]},{"type":"text","value":") or/and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"leaf_certificate"}]},{"type":"text","value":"(or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"leaf_certificate_file"}]},{"type":"text","value":") is valid.\nThis covers the use-case where the CA has signed multiple client certificates and you want to limit the access to specific ones."}]},{"type":"element","tag":"h2","props":{"id":"example"},"children":[{"type":"text","value":"Example"}]},{"type":"element","tag":"code","props":{"code":"client_certificate \"IOT\" {\n  ca_certificate = \"base64_der\" # PEM or DER encoded\n  # OR\n  ca_certificate_file = \"couperIntermediate.crt\" # PEM\n\n  # OR/AND\n  # trusted client leaf cert\n\n  leaf_certificate = \"base64_der\"\n  # OR\n  leaf_certificate_file = \"couperClient.crt\" # PEM\n}\n","language":"hcl"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"client_certificate \"IOT\" {\n  ca_certificate = \"base64_der\" # PEM or DER encoded\n  # OR\n  ca_certificate_file = \"couperIntermediate.crt\" # PEM\n\n  # OR/AND\n  # trusted client leaf cert\n\n  leaf_certificate = \"base64_der\"\n  # OR\n  leaf_certificate_file = \"couperClient.crt\" # PEM\n}\n"}]}]}]},{"type":"element","tag":"attributes","props":{":values":"[{\"default\":\"\",\"description\":\"Public part of the certificate authority in DER or PEM format. Mutually exclusive with `ca_certificate_file`.\",\"name\":\"ca_certificate\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"Reference to a file containing the public part of the certificate authority file in DER or PEM format. Mutually exclusive with `ca_certificate`.\",\"name\":\"ca_certificate_file\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"Public part of the client certificate in DER or PEM format. Mutually exclusive with `leaf_certificate_file`.\",\"name\":\"leaf_certificate\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"Reference to a file containing the public part of the client certificate file in DER or PEM format. Mutually exclusive with `leaf_certificate`.\",\"name\":\"leaf_certificate_file\",\"type\":\"string\"}]"},"children":[]}]},"draft":false,"_type":"markdown","_id":"content:2.configuration:4.block:client_certificate.md","_source":"content","_file":"2.configuration/4.block/client_certificate.md","_extension":"md"}]